# Produce vector graphics for google ngram
from time import time
import numpy
import seaborn as sns
import pandas as pd
from matplotlib import pyplot as plt

def smooth(y, box_pts):
    box = numpy.ones(box_pts)/box_pts
    y_smooth = numpy.convolve(y, box, mode='same')
    return y_smooth

frequencies = [6.578463853657013e-07, 7.631806511199102e-07, 8.796623092166556e-07, 6.956885840736504e-07, 7.269912885021768e-07, 6.933067879799637e-07, 6.94858499628026e-07, 1.024842504193657e-06, 7.608573469042312e-07, 8.252704333244765e-07, 8.57661007103161e-07, 1.095061634259764e-06, 1.1616248229984194e-06, 1.418204533365497e-06, 1.1254674063820858e-06, 1.2233721236043493e-06, 2.2600224838242866e-06, 2.9882971830375027e-06, 2.7907271942240186e-06, 2.9344955692067742e-06, 2.8981964987906395e-06, 2.4822529667289928e-06, 4.511412953434046e-06, 3.534124971338315e-06, 2.6988486752088647e-06, 2.8705846943921642e-06, 2.460736823195475e-06, 2.328029722775682e-06, 2.57682381743507e-06, 2.5296853891632054e-06, 2.703761765587842e-06, 2.907480848080013e-06, 3.3326955417578574e-06, 2.883227125494159e-06, 3.0754058570892084e-06, 2.927344439740409e-06, 3.369650585227646e-06, 3.408741577004548e-06, 3.6452452150115278e-06, 4.90953107146197e-06, 5.77548917135573e-06, 6.394492174877087e-06, 7.354702120210277e-06, 6.689045221719425e-06, 6.114333700679708e-06, 6.7132077674614266e-06, 5.798997335659806e-06, 5.673553459928371e-06, 5.1893448471673764e-06, 5.349374987417832e-06, 5.370869985199533e-06, 4.003001777164172e-06, 3.8345378925441764e-06, 4.0236245695268735e-06, 3.557331183401402e-06, 3.7283839446899947e-06, 3.4659733501030132e-06, 3.831576123047853e-06, 3.911228304787073e-06, 3.906591700797435e-06, 3.927923899027519e-06, 4.083372459717793e-06, 3.68872224498773e-06, 3.900698629877297e-06, 4.015134436485823e-06, 3.7106888157723006e-06, 3.4896786473836983e-06, 4.8751876420283224e-06, 3.989952347183134e-06, 3.7617621728713857e-06, 3.5370255773159442e-06, 4.058932518091751e-06, 4.650226856028894e-06, 7.547742370661581e-06, 1.2407172107486986e-05]
frequencies_smoothed = smooth(frequencies, 2)
time_ticks = list(range(1945,2020)) # x-ticks from 1945 to 2019 inclusive

# Create a dataframe to encapsulate the data.
d = {'Word Frequency':frequencies_smoothed, 'Year':time_ticks}
data_word_frequences = pd.DataFrame(data=d)

# Plot the data
sns.set(font_scale = 2)
sns.set_theme() # Set default theme
fig, ax = plt.subplots() # or 
p = sns.lineplot(data=data_word_frequences, x = "Year", y = "Word Frequency", palette="muted", color='red')
p.set_xlabel("Year", fontsize = 16)
p.set_ylabel("\'AI\' Word Frequency", fontsize = 16)
fig.savefig('ngramAI.eps', format='eps')